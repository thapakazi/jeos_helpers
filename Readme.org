#+TITLE: Readme on userdata helper scripts
#+DATE: Wednesday, Aug 30 2017
#+OPTIONS: num:nil toc:nil H:2

* Making cloudfactory_jeos a generic jeos
  Since I left my [[https://twitter.com/samit_tom/status/965954025035149313][CloudFactory]] <3 I missed so many things, so bad was the attachment I am continueing the work.
  Here I will make few changes to start with:
    - adding more helpers
    - make these jeos generic : adding ~.meta~ to define for company branding
    - adding more documentation

  For backward compatbility of this script, make sure you change the helper names, it can be set in [[./meta][*.meta*]] file
    #+BEGIN_SRC bash
    source .meta
    sed -i "s/jeos/$MY_COMPANY/g" core_utils.sh
    #+END_SRC
  
* About
  These function here are used in userdata section, while the machine boots. 

  Some desing decision made while writing these:
  - everything here should be generic functions: {no hardcoded varaibles(specific to Mycompany)}
  - scripts should be accessible from public(current convention, could change with time later)
* More verbose details  
   #+BEGIN_SRC bash
  grep '(){' *.sh
  #+END_SRC

** Gist about Function
   |--------------------------------------+------------------------------------------------------------------------+--------------------------------------------------|
   | fn()                                 | descritption(function that)                                            |                                                  |
   |--------------------------------------+------------------------------------------------------------------------+--------------------------------------------------|
   | self_init                            | self invoking function, required for initial setups                    | sets USERDATA_TMP if not set                     |
   | utils_pull_private_key               | pulls the private key from s3                                          | required to clone private repos                  |
   | utils_install_dependent_galaxy_roles | installs depended galaxy roles                                         | includes: newrelic & node_exporters              |
   | bootstrap                            | pulls & runs the bootstrapping helper playbooks(scale)                 | scale repo(equivalent to old ami state)          |
   | deployment                           | pulls & runs the deployment scripts from ops-automata                  | can be used to make app, worker,db               |
   | utils_export_home                    | exports HOME path considering any user                                 | root's HOME=/root/ while deploy's: /home/deploy  |
   |                                      |                                                                        |                                                  |

   |--------------------------------------+------------------------------------------------------------------------+--------------------------------------------------|
   | notification & cleanups fn()         |                                                                        |                                                  |
   |--------------------------------------+------------------------------------------------------------------------+--------------------------------------------------|
   | post_cleanup                         | cleans the all temporary supporting files & keys                       |                                                  |
   | utils_notify_slack                   | configures slacktee if not present & post msg to slack#dump            |                                                  |
   | utils_notify_and_post_cleanup        | calls post_cleanup and utils_notify_slack                              |                                                  |
   |                                      |                                                                        |                                                  |

   |--------------------------------------+------------------------------------------------------------------------+--------------------------------------------------|
   | other helping fn()                   |                                                                        |                                                  |
   |--------------------------------------+------------------------------------------------------------------------+--------------------------------------------------|
   | utils_ansicap_with_sidekiq_supervise | pull latest codebase from github, bundles & add supervisor accordingly | this is more used for autoscaling only till now. |
   |--------------------------------------+------------------------------------------------------------------------+--------------------------------------------------|
* Variable, so many what/why are those ?
  About *why*, because its give us flexibility. Most of them have defaults set for them, but in any desired case, most of them could be overwritten with same name.  
** variable conventions

   Conventions gives us intuitive awareness about their existence and usage.
   Eg: BOOTSTRAP_BRANCH that means:
     - its a variable inside bootstrap scope
     - that give us flexibility to mention the branch of [[https://github.com/github/scale][bootstrapping playbook]] we want to use.( I am assuming you are aware of our design, i.e, we pull most of code using git, so we work with branches)
   Now you can simply answer what DEPLOYMENT_BRANCH means, don't you :)
** Confusing variables
   #+BEGIN_SRC bash
   DEPLOYMENT_PLAYBOOK="${DEPLOYMENT_PLAYBOOK:-PROJECT_TO_DEPLOY}.yml" # when deplying services: mongo/redis, this might come handy   
   #+END_SRC

   Here, it means a deployment playbook we would be pulling.
   Eg: to deploy clientplatform stack we use ~clientplatform.yml~ in ops-automata, so we depend on *tag:* ~project: clientplatform~.

   But what if we need to run ~mongodb.yml~ or other thing in ops-automata(our deployment layer defining playbook). There won't ~project: mongodb~ be tags for those.
   Hence for those case, we can simply over-ride the variable in userdata with this flag like: 
   #+BEGIN_SRC bash
      export DEPLOYMENT_PLAYBOOK=mongodb.yml
   #+END_SRC
  
   


   








